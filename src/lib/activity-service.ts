/* eslint-disable @typescript-eslint/no-explicit-any */`nimport { supabase } from '@/utils/supabase/client';`n`nexport type ActivityType = `n  | 'LOGIN'`n  | 'BET_PLACED' `n  | 'MARKET_CREATED'`n  | 'MARKET_RESOLVED'`n  | 'DAILY_BONUS'`n  | 'STREAK_BONUS'`n  | 'REFERRAL_BONUS';`n`nexport interface ActivityData {`n  user_address: string;`n  activity_type: ActivityType;`n  points_earned?: number;`n  metadata?: {`n    marketId?: string;`n    betAmount?: number;`n    outcome?: string;`n    marketTitle?: string;`n    streakDays?: number;`n    [key: string]: any;`n  };`n}`n`nexport class ActivityService {`n  `n  async logActivity(data: ActivityData): Promise<boolean> {`n    try {`n      // Calculate points based on activity type`n      const points = this.calculatePoints(data.activity_type, data.metadata);`n      `n      // Log the activity`n      const { error: activityError } = await supabase`n        .from('activities')`n        .insert({`n          user_address: data.user_address,`n          activity_type: data.activity_type,`n          points_earned: points,`n          metadata: data.metadata || {},`n          created_at: new Date().toISOString()`n        });`n`n      if (activityError) {`n        console.error('Error logging activity:', activityError);`n        return false;`n      }`n`n      // Update user stats`n      await this.updateUserStats(data.user_address, data.activity_type, points);`n      `n      return true;`n    } catch (error) {`n      console.error('Failed to log activity:', error);`n      return false;`n    }`n  }`n`n  private calculatePoints(activityType: ActivityType, metadata?: any): number {`n    switch (activityType) {`n      case 'LOGIN':`n        return 10;`n      case 'BET_PLACED':`n        // Base points + bonus for larger bets`n        const betAmount = metadata?.betAmount || 0;`n        return Math.min(40 + Math.floor(betAmount / 10), 100);`n      case 'MARKET_CREATED':`n        return 100;`n      case 'MARKET_RESOLVED':`n        return 75;`n      case 'DAILY_BONUS':`n        return 25;`n      case 'STREAK_BONUS':`n        return (metadata?.streakDays || 0) * 5;`n      case 'REFERRAL_BONUS':`n        return 50;`n      default:`n        return 0;`n    }`n  }`n`n  private async updateUserStats(`n    userAddress: string, `n    activityType: ActivityType, `n    points: number`n  ): Promise<void> {`n    try {`n      // Get or create user stats`n      const { data: existingStats, error: fetchError } = await supabase`n        .from('user_stats')`n        .select('*')`n        .eq('address', userAddress)`n        .single();`n`n      if (fetchError && fetchError.code !== 'PGRST116') {`n        console.error('Error fetching user stats:', fetchError);`n        return;`n      }`n`n      const currentPoints = existingStats?.Credit Predict_points || 0;`n      const currentActivities = existingStats?.total_activities || 0;`n      const currentBets = existingStats?.bets_placed || 0;`n      const currentMarkets = existingStats?.markets_created || 0;`n      const currentResolved = existingStats?.markets_resolved || 0;`n`n      // Calculate new values`n      const newStats = {`n        address: userAddress,`n        Credit Predict_points: currentPoints + points,`n        total_activities: currentActivities + 1,`n        bets_placed: activityType === 'BET_PLACED' ? currentBets + 1 : currentBets,`n        markets_created: activityType === 'MARKET_CREATED' ? currentMarkets + 1 : currentMarkets,`n        markets_resolved: activityType === 'MARKET_RESOLVED' ? currentResolved + 1 : currentResolved,`n        last_updated: new Date().toISOString()`n      };`n`n      // Upsert user stats`n      const { error: upsertError } = await supabase`n        .from('user_stats')`n        .upsert(newStats, { onConflict: 'address' });`n`n      if (upsertError) {`n        console.error('Error updating user stats:', upsertError);`n      }`n`n    } catch (error) {`n      console.error('Failed to update user stats:', error);`n    }`n  }`n`n  async getUserStats(userAddress: string) {`n    try {`n      const { data, error } = await supabase`n        .from('user_stats')`n        .select('*')`n        .eq('address', userAddress)`n        .single();`n`n      if (error && error.code !== 'PGRST116') {`n        console.error('Error fetching user stats:', error);`n        return null;`n      }`n`n      return data;`n    } catch (error) {`n      console.error('Failed to get user stats:', error);`n      return null;`n    }`n  }`n`n  async getRecentActivities(userAddress: string, limit: number = 10) {`n    try {`n      const { data, error } = await supabase`n        .from('activities')`n        .select('*')`n        .eq('user_address', userAddress)`n        .order('created_at', { ascending: false })`n        .limit(limit);`n`n      if (error) {`n        console.error('Error fetching activities:', error);`n        return [];`n      }`n`n      return data || [];`n    } catch (error) {`n      console.error('Failed to get activities:', error);`n      return [];`n    }`n  }`n}`n`nexport const activityService = new ActivityService();