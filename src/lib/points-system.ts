/* eslint-disable @typescript-eslint/no-explicit-any */`nimport { supabase } from "@/utils/supabase/client";`n`nexport interface ActivityDetails {`n  marketId?: number;`n  betAmount?: number;`n  marketTitle?: string;`n  marketCategory?: string;`n  outcome?: string;`n  winnings?: number;`n  [key: string]: any;`n}`n`nexport const ACTIVITY_POINTS = {`n  REGISTRATION: 100,`n  CREATE_MARKET: 100,`n  PLACE_BET: 40,`n  WIN_BET: 50,`n  MARKET_RESOLVED: 25,`n  DAILY_LOGIN: 10,`n  WEEKLY_STREAK: 50,`n  MONTHLY_ACTIVE: 100,`n} as const;`n`nexport type ActivityType = keyof typeof ACTIVITY_POINTS;`n`nexport class PointsManager {`n  /**`n   * Award points for a specific activity`n   */`n  static async awardPoints(`n    userAddress: string,`n    activityType: ActivityType,`n    details: ActivityDetails,`n    marketId?: number`n  ): Promise<boolean> {`n    try {`n      console.log('ğŸ“Š PointsManager.awardPoints called:', {`n        userAddress,`n        activityType,`n        details,`n        marketId`n      });`n`n      const points = ACTIVITY_POINTS[activityType];`n`n      // First, ensure user exists in users table`n      const { data: existingUser } = await supabase`n        .from('users')`n        .select('address')`n        .eq('address', userAddress)`n        .single();`n`n      if (!existingUser) {`n        // Create user if doesn't exist`n        const { error: userError } = await supabase`n          .from('users')`n          .insert({`n            address: userAddress,`n            username: userAddress.slice(0, 8),`n            display_name: `User ${userAddress.slice(0, 6)}`,`n            created_at: new Date().toISOString()`n          });`n`n        if (userError && userError.code !== '23505') { // Ignore duplicate key error`n          console.error('Error creating user:', userError);`n        }`n      }`n`n      // Insert activity record`n      const activityData = {`n        user_address: userAddress,`n        activity_type: activityType.toLowerCase(), // Use lowercase for consistency`n        market_id: marketId || null,`n        details: details,`n        points_earned: points,`n        created_at: new Date().toISOString()`n      };`n`n      console.log('ğŸ“ Inserting activity:', activityData);`n`n      const { data: activityResult, error: activityError } = await supabase`n        .from('activities')`n        .insert(activityData)`n        .select()`n        .single();`n`n      if (activityError) {`n        console.error('âŒ Error inserting activity:', activityError);`n        return false;`n      }`n`n      console.log('âœ… Activity inserted:', activityResult);`n`n      // Update or create user stats`n      const { data: existingStats } = await supabase`n        .from('user_stats')`n        .select('*')`n        .eq('address', userAddress)`n        .single();`n`n      const currentStats = existingStats || {`n        address: userAddress,`n        Credit Predict_points: 0,`n        total_staked: 0,`n        total_winnings: 0,`n        total_losses: 0,`n        total_markets_participated: 0,`n        win_streak: 0,`n        current_streak: 0,`n        longest_win_streak: 0`n      };`n`n      const updatedStats = {`n        ...currentStats,`n        Credit Predict_points: (currentStats.Credit Predict_points || 0) + points,`n        last_updated: new Date().toISOString()`n      };`n`n      // Update bet-specific stats`n      if (activityType === 'PLACE_BET' && details.betAmount) {`n        updatedStats.total_staked = (currentStats.total_staked || 0) + details.betAmount;`n        updatedStats.total_markets_participated = (currentStats.total_markets_participated || 0) + 1;`n      }`n`n      const { error: statsError } = await supabase`n        .from('user_stats')`n        .upsert(updatedStats, { onConflict: 'address' });`n`n      if (statsError) {`n        console.error('âŒ Error updating user stats:', statsError);`n        return false;`n      }`n`n      console.log('âœ… User stats updated');`n      return true;`n`n    } catch (error) {`n      console.error('âŒ Error in awardPoints:', error);`n      return false;`n    }`n  }`n`n  /**`n   * Get user's current points and rank`n   */`n  static async getUserPointsAndRank(userAddress: string) {`n    try {`n      // Get user's points`n      const { data: userStats, error: userError } = await supabase`n        .from("user_stats")`n        .select("Credit Predict_points")`n        .eq("address", userAddress)`n        .single();`n`n      if (userError) {`n        console.error("Error fetching user points:", userError);`n        return { points: 0, rank: 0 };`n      }`n`n      const userPoints = userStats.Credit Predict_points || 0;`n`n      // Get user's rank`n      const { data: rankings, error: rankError } = await supabase`n        .from("user_stats")`n        .select("address, Credit Predict_points")`n        .order("Credit Predict_points", { ascending: false });`n`n      if (rankError) {`n        console.error("Error fetching rankings:", rankError);`n        return { points: userPoints, rank: 0 };`n      }`n`n      const rank = rankings.findIndex(user => user.address === userAddress) + 1;`n`n      return { points: userPoints, rank };`n    } catch (error) {`n      console.error("Error getting user points and rank:", error);`n      return { points: 0, rank: 0 };`n    }`n  }`n`n  /**`n   * Get leaderboard data`n   */`n  static async getLeaderboard(limit: number = 100): Promise<any[]> {`n    try {`n      console.log('ğŸ† Fetching leaderboard with limit:', limit);`n`n      const { data: leaderboardData, error } = await supabase`n        .from('user_stats')`n        .select(``n          address,`n          Credit Predict_points,`n          total_staked,`n          total_winnings,`n          total_losses,`n          total_markets_participated,`n          win_streak,`n          current_streak,`n          longest_win_streak,`n          last_updated`n        `)`n        .order('Credit Predict_points', { ascending: false }) // ğŸ¯ Sort by points DESC`n        .limit(limit);`n`n      if (error) {`n        console.error('âŒ Error fetching leaderboard:', error);`n        throw error;`n      }`n`n      console.log('âœ… Leaderboard fetched:', leaderboardData?.length, 'entries');`n      console.log('ğŸ¥‡ Top entry:', leaderboardData?.[0]);`n`n      // Format the data with proper structure`n      const formattedData = leaderboardData?.map((entry, index) => ({`n        user_address: entry.address,`n        total_points: entry.Credit Predict_points || 0,`n        total_staked: entry.total_staked || 0,`n        total_winnings: entry.total_winnings || 0,`n        total_losses: entry.total_losses || 0,`n        markets_participated: entry.total_markets_participated || 0,`n        win_streak: entry.win_streak || 0,`n        current_streak: entry.current_streak || 0,`n        longest_win_streak: entry.longest_win_streak || 0,`n        rank: index + 1,`n        last_updated: entry.last_updated`n      })) || [];`n`n      return formattedData;`n    } catch (error) {`n      console.error('âŒ Error in getLeaderboard:', error);`n      throw error;`n    }`n  }`n`n  /**`n   * Get user's recent activities`n   */`n  static async getUserActivities(userAddress: string, limit: number = 20) {`n    try {`n      const { data: activities, error } = await supabase`n        .from("activities")`n        .select("*")`n        .eq("user_address", userAddress)`n        .order("created_at", { ascending: false })`n        .limit(limit);`n`n      if (error) {`n        console.error("Error fetching user activities:", error);`n        return [];`n      }`n`n      return activities;`n    } catch (error) {`n      console.error("Error getting user activities:", error);`n      return [];`n    }`n  }`n`n  /**`n   * Get global activity feed (for homepage/dashboard)`n   */`n  static async getGlobalActivities(limit: number = 50) {`n    try {`n      const { data: activities, error } = await supabase`n        .from("activities")`n        .select(``n          *,`n          users!inner (`n            username,`n            display_name,`n            profile_image_url`n          )`n        `)`n        .order("created_at", { ascending: false })`n        .limit(limit);`n`n      if (error) {`n        console.error("Error fetching global activities:", error);`n        return [];`n      }`n`n      return activities.map(activity => {`n        const userInfo = Array.isArray(activity.users) ? activity.users[0] : activity.users;`n        `n        return {`n          ...activity,`n          user: {`n            username: userInfo?.username || "Anonymous",`n            displayName: userInfo?.display_name || "Unknown User",`n            profileImage: userInfo?.profile_image_url || null`n          }`n        };`n      });`n    } catch (error) {`n      console.error("Error getting global activities:", error);`n      return [];`n    }`n  }`n`n  /**`n   * Get user stats summary`n   */`n  static async getUserStats(userAddress: string) {`n    try {`n      const { data: stats, error } = await supabase`n        .from("user_stats")`n        .select("*")`n        .eq("address", userAddress)`n        .single();`n`n      if (error) {`n        console.error("Error fetching user stats:", error);`n        return null;`n      }`n`n      return {`n        address: stats.address,`n        points: stats.Credit Predict_points || 0,`n        totalStaked: stats.total_staked || 0,`n        totalWinnings: stats.total_winnings || 0,`n        totalLosses: stats.total_losses || 0,`n        marketsParticipated: stats.total_markets_participated || 0,`n        winStreak: stats.win_streak || 0,`n        currentStreak: stats.current_streak || 0,`n        longestWinStreak: stats.longest_win_streak || 0,`n        averageBetSize: stats.average_bet_size || 0,`n        roi: stats.roi || 0,`n        lastUpdated: stats.last_updated`n      };`n    } catch (error) {`n      console.error("Error getting user stats:", error);`n      return null;`n    }`n  }`n`n  /**`n   * Check and award daily login bonus`n   */`n  static async checkDailyLoginBonus(userAddress: string): Promise<boolean> {`n    try {`n      const today = new Date().toISOString().split('T')[0]; // Get YYYY-MM-DD format`n      `n      // Check if user already got daily bonus today`n      const { data: todayActivity, error } = await supabase`n        .from("activities")`n        .select("id")`n        .eq("user_address", userAddress)`n        .eq("activity_type", "daily_login")`n        .gte("created_at", `${today}T00:00:00.000Z`)`n        .lt("created_at", `${today}T23:59:59.999Z`)`n        .single();`n`n      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned`n        console.error("Error checking daily login:", error);`n        return false;`n      }`n`n      // If already got bonus today, return false`n      if (todayActivity) {`n        return false;`n      }`n`n      // Award daily login bonus`n      return await this.awardPoints(userAddress, "DAILY_LOGIN", {`n        loginDate: today,`n        bonusType: "daily_login"`n      });`n    } catch (error) {`n      console.error("Error checking daily login bonus:", error);`n      return false;`n    }`n  }`n`n  /**`n   * Update user stats when they lose a bet`n   */`n  static async recordLoss(`n    userAddress: string,`n    lossAmount: number,`n    marketId: number,`n    marketTitle?: string`n  ): Promise<boolean> {`n    try {`n      const now = new Date().toISOString();`n`n      // Get current stats`n      const { data: currentStats, error: fetchError } = await supabase`n        .from("user_stats")`n        .select("*")`n        .eq("address", userAddress)`n        .single();`n`n      if (fetchError) {`n        console.error("Error fetching user stats for loss:", fetchError);`n        return false;`n      }`n`n      // Update stats for loss`n      const { error: updateError } = await supabase`n        .from("user_stats")`n        .update({`n          total_losses: (currentStats.total_losses || 0) + lossAmount,`n          win_streak: 0, // Reset win streak`n          current_streak: 0, // Reset current streak`n          roi: (((currentStats.total_winnings || 0) - ((currentStats.total_losses || 0) + lossAmount)) / `n                Math.max(currentStats.total_staked || 1, 1)) * 100,`n          last_updated: now`n        })`n        .eq("address", userAddress);`n`n      if (updateError) {`n        console.error("Error updating user stats for loss:", updateError);`n        return false;`n      }`n`n      // Log the loss activity (no points awarded)`n      const { error: activityError } = await supabase`n        .from("activities")`n        .insert({`n          user_address: userAddress,`n          activity_type: "bet_loss",`n          details: {`n            lossAmount,`n            marketId,`n            marketTitle,`n            timestamp: now`n          },`n          points_earned: 0,`n          market_id: marketId,`n          created_at: now`n        });`n`n      if (activityError) {`n        console.error("Error logging loss activity:", activityError);`n      }`n`n      return true;`n    } catch (error) {`n      console.error("Error recording loss:", error);`n      return false;`n    }`n  }`n}