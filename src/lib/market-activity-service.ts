import { supabase } from '@/utils/supabase/client';`n`nexport interface MarketActivity {`n  id: string;`n  user_address: string;`n  activity_type: string;`n  points_earned: number;`n  metadata: {`n    marketId?: string;`n    betAmount?: number;`n    outcome?: string;`n    transactionId?: string;`n  };`n  created_at: string;`n  user_profile?: {`n    username?: string;`n    display_name?: string;`n    profile_image_url?: string;`n  };`n}`n`nexport class MarketActivityService {`n  async getMarketActivities(marketId: string, limit: number = 50): Promise<MarketActivity[]> {`n    try {`n      const { data, error } = await supabase`n        .from('activities')`n        .select(``n          *,`n          profiles:user_address (`n            username,`n            display_name,`n            profile_image_url`n          )`n        `)`n        .eq('activity_type', 'BET_PLACED')`n        .contains('metadata', { marketId })`n        .order('created_at', { ascending: false })`n        .limit(limit);`n`n      if (error) {`n        console.error('Error fetching market activities:', error);`n        return [];`n      }`n`n      return data?.map(activity => ({`n        ...activity,`n        user_profile: activity.profiles`n      })) || [];`n    } catch (error) {`n      console.error('Failed to get market activities:', error);`n      return [];`n    }`n  }`n`n  async getMarketStats(marketId: string) {`n    try {`n      const { data, error } = await supabase`n        .from('activities')`n        .select('user_address, metadata')`n        .eq('activity_type', 'BET_PLACED')`n        .contains('metadata', { marketId });`n`n      if (error) {`n        console.error('Error fetching market stats:', error);`n        return {`n          totalBettors: 0,`n          totalVolume: 0,`n          optionAVolume: 0,`n          optionBVolume: 0`n        };`n      }`n`n      const uniqueBettors = new Set(data?.map(d => d.user_address) || []).size;`n      const totalVolume = data?.reduce((sum, d) => sum + (d.metadata?.betAmount || 0), 0) || 0;`n      const optionAVolume = data`n        ?.filter(d => d.metadata?.outcome === 'optionA')`n        .reduce((sum, d) => sum + (d.metadata?.betAmount || 0), 0) || 0;`n      const optionBVolume = totalVolume - optionAVolume;`n`n      return {`n        totalBettors: uniqueBettors,`n        totalVolume,`n        optionAVolume,`n        optionBVolume`n      };`n    } catch (error) {`n      console.error('Failed to get market stats:', error);`n      return {`n        totalBettors: 0,`n        totalVolume: 0,`n        optionAVolume: 0,`n        optionBVolume: 0`n      };`n    }`n  }`n}`n`nexport const marketActivityService = new MarketActivityService();