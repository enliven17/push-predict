import { supabase } from '@/utils/supabase/client';`n`nexport interface LeaderboardUser {`n  id: string;`n  address: string;`n  username: string;`n  display_name?: string;`n  profile_image_url?: string;`n  Credit Predict_points: number;`n  rank: number;`n  `n  // Activity stats`n  total_activities: number;`n  markets_created: number;`n  bets_placed: number;`n  markets_resolved: number;`n  login_streak: number;`n  `n  // Time-based points`n  weekly_points: number;`n  monthly_points: number;`n  `n  // Engagement metrics`n  joined_at: string;`n  last_active: string;`n  badges: string[];`n}`n`nexport type LeaderboardTimeframe = 'all-time' | 'weekly' | 'monthly';`nexport type LeaderboardCategory = 'total-points' | 'market-creation' | 'betting' | 'resolution';`n`ninterface UserStatsWithUser {`n  address: string;`n  Credit Predict_points: number;`n  total_staked: number;`n  total_winnings: number;`n  total_losses: number;`n  total_markets_participated: number;`n  win_streak: number;`n  current_streak: number;`n  longest_win_streak: number;`n  last_updated: string;`n  users: {`n    username: string;`n    display_name: string | null;`n    profile_image_url: string | null;`n    joined_at: string;`n  } | {`n    username: string;`n    display_name: string | null;`n    profile_image_url: string | null;`n    joined_at: string;`n  }[];`n}`n`ninterface ActivityRecord {`n  user_address: string;`n  activity_type: string;`n  created_at: string;`n}`n`nexport class LeaderboardService {`n  `n  async getLeaderboard(`n    timeframe: LeaderboardTimeframe = 'all-time',`n    category: LeaderboardCategory = 'total-points',`n    limit: number = 100`n  ): Promise<LeaderboardUser[]> {`n    try {`n      const query = supabase`n        .from('user_stats')`n        .select(``n          address,`n          Credit Predict_points,`n          total_staked,`n          total_winnings,`n          total_losses,`n          total_markets_participated,`n          win_streak,`n          current_streak,`n          longest_win_streak,`n          last_updated,`n          users!inner(`n            username,`n            display_name,`n            profile_image_url,`n            joined_at`n          )`n        `)`n        .order('Credit Predict_points', { ascending: false })`n        .limit(limit);`n`n      const { data: userStats, error } = await query;`n`n      if (error) {`n        console.error('Error fetching leaderboard:', error);`n        return [];`n      }`n`n      if (!userStats) return [];`n`n      // Type the userStats properly`n      const typedUserStats = userStats as UserStatsWithUser[];`n`n      // Get activity counts for each user`n      const addresses = typedUserStats.map(stat => stat.address);`n      const { data: activities } = await supabase`n        .from('activities')`n        .select('user_address, activity_type, created_at')`n        .in('user_address', addresses);`n`n      const typedActivities = activities as ActivityRecord[] || [];`n`n      // Process the data`n      const leaderboardUsers: LeaderboardUser[] = typedUserStats.map((stat, index) => {`n        // Handle both single object and array cases for users data`n        const user = Array.isArray(stat.users) ? stat.users[0] : stat.users;`n        `n        const userActivities = typedActivities.filter(activity => `n          activity.user_address === stat.address`n        );`n`n        // Calculate activity stats`n        const marketCreationActivities = userActivities.filter(a => `n          a.activity_type === 'MARKET_CREATED'`n        );`n        const bettingActivities = userActivities.filter(a => `n          a.activity_type === 'BET_PLACED'`n        );`n        const resolutionActivities = userActivities.filter(a => `n          a.activity_type === 'MARKET_RESOLVED'`n        );`n`n        // Calculate time-based points`n        const now = new Date();`n        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);`n        const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);`n`n        const weeklyActivities = userActivities.filter(a => `n          new Date(a.created_at) >= weekAgo`n        );`n        const monthlyActivities = userActivities.filter(a => `n          new Date(a.created_at) >= monthAgo`n        );`n`n        // Estimate points from activities (you can adjust these values)`n        const weeklyPoints = this.calculatePointsFromActivities(weeklyActivities);`n        const monthlyPoints = this.calculatePointsFromActivities(monthlyActivities);`n`n        // Generate badges based on activity`n        const badges = this.generateBadges(stat, userActivities);`n`n        return {`n          id: stat.address,`n          address: stat.address,`n          username: user?.username || `User ${stat.address.slice(0, 6)}`,`n          display_name: user?.display_name || undefined,`n          profile_image_url: user?.profile_image_url || undefined,`n          Credit Predict_points: stat.Credit Predict_points || 0,`n          rank: index + 1,`n          `n          total_activities: userActivities.length,`n          markets_created: marketCreationActivities.length,`n          bets_placed: bettingActivities.length,`n          markets_resolved: resolutionActivities.length,`n          login_streak: stat.current_streak || 0,`n          `n          weekly_points: weeklyPoints,`n          monthly_points: monthlyPoints,`n          `n          joined_at: user?.joined_at || new Date().toISOString(),`n          last_active: stat.last_updated || new Date().toISOString(),`n          badges`n        };`n      });`n`n      // Sort based on category and timeframe`n      return this.sortLeaderboard(leaderboardUsers, category, timeframe);`n`n    } catch (error) {`n      console.error('Failed to fetch leaderboard:', error);`n      return [];`n    }`n  }`n`n  private calculatePointsFromActivities(activities: ActivityRecord[]): number {`n    return activities.reduce((total, activity) => {`n      switch (activity.activity_type) {`n        case 'MARKET_CREATED': return total + 100;`n        case 'BET_PLACED': return total + 40;`n        case 'MARKET_RESOLVED': return total + 75;`n        case 'LOGIN': return total + 10;`n        case 'DAILY_BONUS': return total + 25;`n        default: return total;`n      }`n    }, 0);`n  }`n`n  private generateBadges(userStats: UserStatsWithUser, activities: ActivityRecord[]): string[] {`n    const badges: string[] = [];`n    `n    if (userStats.Credit Predict_points >= 10000) badges.push('High Roller');`n    if (userStats.Credit Predict_points >= 5000) badges.push('Points Master');`n    if (userStats.longest_win_streak >= 10) badges.push('Streak King');`n    if (activities.filter(a => a.activity_type === 'MARKET_CREATED').length >= 10) {`n      badges.push('Market Maker');`n    }`n    if (activities.filter(a => a.activity_type === 'BET_PLACED').length >= 50) {`n      badges.push('Active Trader');`n    }`n    if (userStats.current_streak >= 7) badges.push('Consistent');`n    `n    return badges;`n  }`n`n  private sortLeaderboard(`n    users: LeaderboardUser[], `n    category: LeaderboardCategory, `n    timeframe: LeaderboardTimeframe`n  ): LeaderboardUser[] {`n    let sorted = [...users];`n`n    switch (category) {`n      case 'total-points':`n        if (timeframe === 'weekly') {`n          sorted = sorted.sort((a, b) => b.weekly_points - a.weekly_points);`n        } else if (timeframe === 'monthly') {`n          sorted = sorted.sort((a, b) => b.monthly_points - a.monthly_points);`n        } else {`n          sorted = sorted.sort((a, b) => b.Credit Predict_points - a.Credit Predict_points);`n        }`n        break;`n      case 'market-creation':`n        sorted = sorted.sort((a, b) => b.markets_created - a.markets_created);`n        break;`n      case 'betting':`n        sorted = sorted.sort((a, b) => b.bets_placed - a.bets_placed);`n        break;`n      case 'resolution':`n        sorted = sorted.sort((a, b) => b.markets_resolved - a.markets_resolved);`n        break;`n    }`n`n    // Update ranks`n    return sorted.map((user, index) => ({`n      ...user,`n      rank: index + 1`n    }));`n  }`n`n  async getUserRank(userAddress: string): Promise<number> {`n    try {`n      const { data: userStats, error } = await supabase`n        .from('user_stats')`n        .select('Credit Predict_points')`n        .eq('address', userAddress)`n        .single();`n`n      if (error || !userStats) return 0;`n`n      const userPoints = userStats.Credit Predict_points || 0;`n`n      const { count } = await supabase`n        .from('user_stats')`n        .select('*', { count: 'exact', head: true })`n        .gt('Credit Predict_points', userPoints);`n`n      return (count || 0) + 1;`n    } catch (error) {`n      console.error('Error getting user rank:', error);`n      return 0;`n    }`n  }`n}`n`nexport const leaderboardService = new LeaderboardService();