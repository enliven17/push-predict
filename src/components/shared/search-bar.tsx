"use client";`n`n// src/components/shared/search-bar.tsx`n`nimport { useState, useEffect, useRef } from "react";`nimport { useRouter } from "next/navigation";`nimport { Input } from "@/components/ui/input";`nimport { Button } from "@/components/ui/button";`nimport { Badge } from "@/components/ui/badge";`nimport { `n  Search, `n  X, `n  Clock,`n  TrendingUp,`n  Filter`n} from "lucide-react";`n`ninterface SearchSuggestion {`n  id: string;`n  title: string;`n  category: string;`n  type: "market" | "user" | "category";`n}`n`n// Mock search suggestions - replace with actual API call`nconst mockSuggestions: SearchSuggestion[] = [`n  { id: "1", title: "Will Bitcoin reach $100k by end of 2025?", category: "Economics", type: "market" },`n  { id: "2", title: "Next US Presidential Election Winner", category: "Politics", type: "market" },`n  { id: "3", title: "Sports", category: "Sports", type: "category" },`n  { id: "4", title: "Will ChatGPT-5 be released in 2025?", category: "Technology", type: "market" },`n];`n`nexport function SearchBar() {`n  const [query, setQuery] = useState("");`n  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);`n  const [isOpen, setIsOpen] = useState(false);`n  const [recentSearches, setRecentSearches] = useState<string[]>([]);`n  const router = useRouter();`n  const inputRef = useRef<HTMLInputElement>(null);`n  const containerRef = useRef<HTMLDivElement>(null);`n`n  // Load recent searches from localStorage on mount`n  useEffect(() => {`n    const saved = localStorage.getItem("recent-searches");`n    if (saved) {`n      setRecentSearches(JSON.parse(saved));`n    }`n  }, []);`n`n  // Handle search suggestions`n  useEffect(() => {`n    if (query.length > 1) {`n      // Simulate API call`n      const filtered = mockSuggestions.filter(suggestion =>`n        suggestion.title.toLowerCase().includes(query.toLowerCase()) ||`n        suggestion.category.toLowerCase().includes(query.toLowerCase())`n      );`n      setSuggestions(filtered);`n      setIsOpen(true);`n    } else {`n      setSuggestions([]);`n      setIsOpen(query.length === 0 && document.activeElement === inputRef.current);`n    }`n  }, [query]);`n`n  // Close dropdown when clicking outside`n  useEffect(() => {`n    function handleClickOutside(event: MouseEvent) {`n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {`n        setIsOpen(false);`n      }`n    }`n`n    document.addEventListener("mousedown", handleClickOutside);`n    return () => document.removeEventListener("mousedown", handleClickOutside);`n  }, []);`n`n  const handleSearch = (searchQuery: string) => {`n    if (!searchQuery.trim()) return;`n    `n    // Add to recent searches`n    const updated = [searchQuery, ...recentSearches.filter(s => s !== searchQuery)].slice(0, 5);`n    setRecentSearches(updated);`n    localStorage.setItem("recent-searches", JSON.stringify(updated));`n    `n    // Navigate to search results`n    router.push(`/markets?search=${encodeURIComponent(searchQuery)}`);`n    setQuery("");`n    setIsOpen(false);`n    inputRef.current?.blur();`n  };`n`n  const handleKeyDown = (e: React.KeyboardEvent) => {`n    if (e.key === "Enter") {`n      handleSearch(query);`n    } else if (e.key === "Escape") {`n      setIsOpen(false);`n      inputRef.current?.blur();`n    }`n  };`n`n  const clearRecentSearches = () => {`n    setRecentSearches([]);`n    localStorage.removeItem("recent-searches");`n  };`n`n  return (`n    <div ref={containerRef} className="relative w-full">`n      {/* Search Input */}`n      <div className="relative">`n        <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />`n        <Input`n          ref={inputRef}`n          type="text"`n          placeholder="Search markets, users, categories..."`n          value={query}`n          onChange={(e) => setQuery(e.target.value)}`n          onKeyDown={handleKeyDown}`n          onFocus={() => setIsOpen(true)}`n          className="pl-9 pr-10"`n        />`n        {query && (`n          <Button`n            variant="ghost"`n            size="sm"`n            className="absolute right-2 top-1/2 h-6 w-6 -translate-y-1/2 p-0"`n            onClick={() => {`n              setQuery("");`n              inputRef.current?.focus();`n            }}`n          >`n            <X className="h-4 w-4" />`n          </Button>`n        )}`n      </div>`n`n      {/* Search Dropdown */}`n      {isOpen && (`n        <div className="absolute top-full z-50 mt-1 w-full rounded-md border bg-popover p-0 shadow-md">`n          {/* Search Suggestions */}`n          {suggestions.length > 0 && (`n            <div className="border-b p-2">`n              <h4 className="text-xs font-medium text-muted-foreground mb-2">Suggestions</h4>`n              {suggestions.map((suggestion) => (`n                <button`n                  key={suggestion.id}`n                  className="w-full text-left rounded-sm px-2 py-1.5 text-sm hover:bg-accent hover:text-accent-foreground flex items-center justify-between group"`n                  onClick={() => {`n                    if (suggestion.type === "market") {`n                      router.push(`/markets/${suggestion.id}`);`n                    } else if (suggestion.type === "category") {`n                      router.push(`/markets?category=${suggestion.category}`);`n                    }`n                    setIsOpen(false);`n                  }}`n                >`n                  <div className="flex items-center space-x-2">`n                    {suggestion.type === "market" ? (`n                      <TrendingUp className="h-4 w-4 text-muted-foreground" />`n                    ) : (`n                      <Filter className="h-4 w-4 text-muted-foreground" />`n                    )}`n                    <span className="truncate">{suggestion.title}</span>`n                  </div>`n                  <Badge variant="secondary" className="text-xs">`n                    {suggestion.category}`n                  </Badge>`n                </button>`n              ))}`n            </div>`n          )}`n`n          {/* Recent Searches */}`n          {query.length === 0 && recentSearches.length > 0 && (`n            <div className="p-2">`n              <div className="flex items-center justify-between mb-2">`n                <h4 className="text-xs font-medium text-muted-foreground">Recent Searches</h4>`n                <Button`n                  variant="ghost"`n                  size="sm"`n                  className="h-auto p-0 text-xs text-muted-foreground"`n                  onClick={clearRecentSearches}`n                >`n                  Clear`n                </Button>`n              </div>`n              {recentSearches.map((search, index) => (`n                <button`n                  key={index}`n                  className="w-full text-left rounded-sm px-2 py-1.5 text-sm hover:bg-accent hover:text-accent-foreground flex items-center space-x-2"`n                  onClick={() => handleSearch(search)}`n                >`n                  <Clock className="h-4 w-4 text-muted-foreground" />`n                  <span className="truncate">{search}</span>`n                </button>`n              ))}`n            </div>`n          )}`n`n          {/* No Results */}`n          {query.length > 1 && suggestions.length === 0 && (`n            <div className="p-4 text-center text-sm text-muted-foreground">`n              No suggestions found for "{query}"`n              <br />`n              <Button`n                variant="link"`n                className="mt-1 h-auto p-0 text-sm"`n                onClick={() => handleSearch(query)}`n              >`n                Search anyway`n              </Button>`n            </div>`n          )}`n`n          {/* Empty State */}`n          {query.length === 0 && recentSearches.length === 0 && (`n            <div className="p-4 text-center text-sm text-muted-foreground">`n              Start typing to search markets...`n            </div>`n          )}`n        </div>`n      )}`n    </div>`n  );`n}