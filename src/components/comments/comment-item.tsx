// src/components/comments/comment-item.tsx - Mobile-friendly version`n"use client";`n`nimport { useState } from "react";`nimport { Button } from "@/components/ui/button";`nimport { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";`nimport {`n  DropdownMenu,`n  DropdownMenuContent,`n  DropdownMenuItem,`n  DropdownMenuTrigger,`n} from "@/components/ui/dropdown-menu";`nimport {`n  Heart,`n  HeartOff,`n  MessageCircle,`n  MoreHorizontal,`n  Edit,`n  Trash2,`n  Reply,`n} from "lucide-react";`nimport { formatDistanceToNow } from "date-fns";`nimport { Comment, CommentsService } from "@/lib/comments-service";`nimport { toast } from "sonner";`nimport { CommentForm } from "./comment-form";`n`ninterface CommentItemProps {`n  comment: Comment;`n  currentUserAddress?: string;`n  onUpdate: () => void;`n  level?: number;`n}`n`nexport function CommentItem({`n  comment,`n  currentUserAddress,`n  onUpdate,`n  level = 0,`n}: CommentItemProps) {`n  const [isReplying, setIsReplying] = useState(false);`n  const [isEditing, setIsEditing] = useState(false);`n  const [isLiking, setIsLiking] = useState(false);`n  const [showReplies, setShowReplies] = useState(true);`n  const [isDeleting, setIsDeleting] = useState(false);`n`n  const isOwnComment = currentUserAddress === comment.user_address;`n  const hasReplies = comment.replies && comment.replies.length > 0;`n`n  const handleReaction = async (type: "like" | "dislike") => {`n    if (!currentUserAddress || isLiking) return;`n`n    setIsLiking(true);`n    try {`n      console.log(`Attempting to ${type} comment ${comment.id}`);`n`n      const success = await CommentsService.reactToComment(`n        comment.id,`n        currentUserAddress,`n        type,`n      );`n`n      if (success) {`n        console.log(`Successfully ${type}d comment, refreshing...`);`n        // Add a small delay to ensure database is updated`n        setTimeout(() => {`n          onUpdate();`n        }, 300);`n      } else {`n        toast.error("Failed to react to comment");`n      }`n    } catch (error) {`n      console.error("Error in handleReaction:", error);`n      toast.error("Failed to react to comment");`n    } finally {`n      setIsLiking(false);`n    }`n  };`n`n  const handleDelete = async () => {`n    if (!currentUserAddress || isDeleting) return;`n`n    setIsDeleting(true);`n    try {`n      console.log(`Attempting to delete comment ${comment.id}`);`n`n      const success = await CommentsService.deleteComment(`n        comment.id,`n        currentUserAddress,`n      );`n`n      if (success) {`n        toast.success("Comment deleted");`n        onUpdate();`n      } else {`n        toast.error("Failed to delete comment");`n      }`n    } catch (error) {`n      console.error("Error deleting comment:", error);`n      toast.error("Failed to delete comment");`n    } finally {`n      setIsDeleting(false);`n    }`n  };`n`n  const handleReplySuccess = () => {`n    setIsReplying(false);`n    onUpdate();`n  };`n`n  const handleEditSuccess = () => {`n    setIsEditing(false);`n    onUpdate();`n  };`n`n  return (`n    <div`n      className={`${level > 0 ? "ml-2 sm:ml-8 border-l-2 border-gray-800/50 pl-2 sm:pl-4" : ""}`}`n    >`n      <div className="flex gap-2 sm:gap-3 group p-3 sm:p-4 rounded-xl bg-gray-800/20 border border-gray-800/30 hover:border-gray-700/50 transition-all duration-200">`n        <Avatar className="h-8 w-8 sm:h-10 sm:w-10 flex-shrink-0">`n          <AvatarImage`n            src={`n              comment.user?.profile_image_url ||`n              `https://api.dicebear.com/7.x/avataaars/svg?seed=${comment.user_address}``n            }`n          />`n          <AvatarFallback className="bg-[#9b87f5]/20 text-[#9b87f5] font-bold text-xs sm:text-sm">`n            {comment.user?.display_name?.[0] ||`n              comment.user?.username?.[0] ||`n              comment.user_address?.slice(2, 4).toUpperCase() ||`n              "?"}`n          </AvatarFallback>`n        </Avatar>`n`n        <div className="flex-1 space-y-2 min-w-0">`n          <div className="flex items-center gap-2 flex-wrap">`n            <span className="font-semibold text-white text-sm truncate max-w-[120px] sm:max-w-none">`n              {comment.user?.display_name ||`n                comment.user?.username ||`n                `${comment.user_address?.slice(0, 6)}...${comment.user_address?.slice(-4)}`}`n            </span>`n            <span className="text-xs text-gray-400 flex-shrink-0">`n              {formatDistanceToNow(new Date(comment.created_at))} ago`n              {comment.edited && " (edited)"}`n            </span>`n          </div>`n`n          {isEditing ? (`n            <CommentForm`n              initialValue={comment.content}`n              onSubmit={async (content) => {`n                if (!currentUserAddress) return;`n                const success = await CommentsService.updateComment(`n                  comment.id,`n                  content,`n                  currentUserAddress,`n                );`n                if (success) {`n                  handleEditSuccess();`n                  toast.success("Comment updated");`n                } else {`n                  toast.error("Failed to update comment");`n                }`n              }}`n              onCancel={() => setIsEditing(false)}`n              submitLabel="Update"`n            />`n          ) : (`n            <p className="text-sm text-gray-300 leading-relaxed break-words">`n              {comment.content}`n            </p>`n          )}`n`n          {/* Mobile-optimized action buttons */}`n          <div className="flex items-center gap-1 flex-wrap">`n            <Button`n              variant="ghost"`n              size="sm"`n              onClick={() => handleReaction("like")}`n              disabled={isLiking}`n              className={`h-6 sm:h-7 px-1.5 sm:px-2 text-xs hover:bg-gray-700/50 ${`n                comment.user_reaction === "like"`n                  ? "text-red-400 hover:text-red-300"`n                  : "text-gray-400 hover:text-white"`n              }`}`n            >`n              <Heart`n                className={`h-3 w-3 mr-1 ${`n                  comment.user_reaction === "like" ? "fill-current" : ""`n                }`}`n              />`n              <span className="hidden sm:inline">{comment.likes_count}</span>`n              <span className="sm:hidden">{comment.likes_count}</span>`n            </Button>`n`n            <Button`n              variant="ghost"`n              size="sm"`n              onClick={() => handleReaction("dislike")}`n              disabled={isLiking}`n              className={`h-6 sm:h-7 px-1.5 sm:px-2 text-xs hover:bg-gray-700/50 ${`n                comment.user_reaction === "dislike"`n                  ? "text-blue-400 hover:text-blue-300"`n                  : "text-gray-400 hover:text-white"`n              }`}`n            >`n              <HeartOff`n                className={`h-3 w-3 mr-1 ${`n                  comment.user_reaction === "dislike" ? "fill-current" : ""`n                }`}`n              />`n              <span>{comment.dislikes_count}</span>`n            </Button>`n`n            {currentUserAddress && level < 3 && (`n              <Button`n                variant="ghost"`n                size="sm"`n                onClick={() => setIsReplying(true)}`n                className="h-6 sm:h-7 px-1.5 sm:px-2 text-xs text-gray-400 hover:text-white hover:bg-gray-700/50"`n              >`n                <Reply className="h-3 w-3 mr-1" />`n                <span className="hidden sm:inline">Reply</span>`n              </Button>`n            )}`n`n            {isOwnComment && (`n              <DropdownMenu>`n                <DropdownMenuTrigger asChild>`n                  <Button`n                    variant="ghost"`n                    size="sm"`n                    className="h-6 w-6 sm:h-7 sm:w-7 p-0 text-gray-400 hover:text-white hover:bg-gray-700/50"`n                  >`n                    <MoreHorizontal className="h-3 w-3" />`n                  </Button>`n                </DropdownMenuTrigger>`n                <DropdownMenuContent className="bg-[#1A1F2C] border-gray-700">`n                  <DropdownMenuItem`n                    onClick={() => setIsEditing(true)}`n                    className="text-gray-300 hover:text-white hover:bg-gray-700/50"`n                  >`n                    <Edit className="h-3 w-3 mr-2" />`n                    Edit`n                  </DropdownMenuItem>`n                  <DropdownMenuItem`n                    onClick={handleDelete}`n                    disabled={isDeleting}`n                    className="text-red-400 hover:text-red-300 hover:bg-red-500/10"`n                  >`n                    <Trash2 className="h-3 w-3 mr-2" />`n                    {isDeleting ? "Deleting..." : "Delete"}`n                  </DropdownMenuItem>`n                </DropdownMenuContent>`n              </DropdownMenu>`n            )}`n          </div>`n`n          {isReplying && (`n            <div className="mt-3">`n              <CommentForm`n                placeholder="Write a reply..."`n                onSubmit={async (content) => {`n                  if (!currentUserAddress) return;`n                  await CommentsService.addComment({`n                    content,`n                    userAddress: currentUserAddress,`n                    marketId: comment.market_id,`n                    parentId: comment.id,`n                  });`n                  handleReplySuccess();`n                  toast.success("Reply added!");`n                }}`n                onCancel={() => setIsReplying(false)}`n                submitLabel="Reply"`n              />`n            </div>`n          )}`n`n          {hasReplies && (`n            <div className="mt-3">`n              <Button`n                variant="ghost"`n                size="sm"`n                onClick={() => setShowReplies(!showReplies)}`n                className="h-6 sm:h-7 px-0 text-xs text-gray-400 hover:text-[#9b87f5]"`n              >`n                <MessageCircle className="h-3 w-3 mr-1" />`n                {showReplies ? "Hide" : "Show"} {comment.replies!.length}{" "}`n                {comment.replies!.length === 1 ? "reply" : "replies"}`n              </Button>`n`n              {showReplies && (`n                <div className="mt-3 space-y-3 sm:space-y-4">`n                  {comment.replies!.map((reply) => (`n                    <CommentItem`n                      key={reply.id}`n                      comment={reply}`n                      currentUserAddress={currentUserAddress}`n                      onUpdate={onUpdate}`n                      level={level + 1}`n                    />`n                  ))}`n                </div>`n              )}`n            </div>`n          )}`n        </div>`n      </div>`n    </div>`n  );`n}