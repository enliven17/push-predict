"use client";`n`nimport React from 'react';`nimport { useAllMarkets } from '@/hooks/use-all-markets';`nimport { MarketCard } from './market-card';`nimport { Button } from '@/components/ui/button';`nimport { Loader2, RefreshCw, TrendingUp } from 'lucide-react';`n`ninterface MarketGridProps {`n  showFilters?: boolean;`n  limit?: number;`n  categoryFilter?: number;`n  statusFilter?: number;`n}`n`nexport const MarketGrid: React.FC<MarketGridProps> = ({ `n  showFilters = true, `n  limit,`n  categoryFilter,`n  statusFilter `n}) => {`n  const { markets, isLoading, error, refetch } = useAllMarkets();`n`n  // Filter markets based on props`n  const filteredMarkets = React.useMemo(() => {`n    let filtered = markets;`n`n    if (categoryFilter !== undefined) {`n      filtered = filtered.filter(market => market.category === categoryFilter);`n    }`n`n    if (statusFilter !== undefined) {`n      filtered = filtered.filter(market => market.status === statusFilter);`n    }`n`n    if (limit) {`n      filtered = filtered.slice(0, limit);`n    }`n`n    return filtered;`n  }, [markets, categoryFilter, statusFilter, limit]);`n`n  if (isLoading) {`n    return (`n      <div className="flex flex-col items-center justify-center py-16">`n        <Loader2 className="h-8 w-8 animate-spin text-gray-400 mb-4" />`n        <p className="text-gray-500 text-sm">Loading markets...</p>`n      </div>`n    );`n  }`n`n  if (error) {`n    return (`n      <div className="text-center py-16 bg-gray-50 rounded-lg border border-gray-200">`n        <div className="max-w-md mx-auto">`n          <div className="text-gray-400 mb-4">`n            <TrendingUp className="h-12 w-12 mx-auto" />`n          </div>`n          <h3 className="text-lg font-medium text-gray-900 mb-2">Unable to load markets</h3>`n          <p className="text-gray-500 text-sm mb-6">{error}</p>`n          <Button onClick={refetch} className="bg-blue-600 hover:bg-blue-700">`n            <RefreshCw className="h-4 w-4 mr-2" />`n            Try Again`n          </Button>`n        </div>`n      </div>`n    );`n  }`n`n  if (filteredMarkets.length === 0) {`n    return (`n      <div className="text-center py-16 bg-gray-50 rounded-lg border border-gray-200">`n        <div className="max-w-md mx-auto">`n          <div className="text-gray-400 mb-4">`n            <TrendingUp className="h-12 w-12 mx-auto" />`n          </div>`n          <h3 className="text-lg font-medium text-gray-900 mb-2">No markets found</h3>`n          <p className="text-gray-500 text-sm mb-6">`n            There are no markets matching your criteria at the moment.`n          </p>`n          <Button onClick={refetch} variant="outline">`n            <RefreshCw className="h-4 w-4 mr-2" />`n            Refresh`n          </Button>`n        </div>`n      </div>`n    );`n  }`n`n  return (`n    <div className="space-y-6">`n      {showFilters && (`n        <div className="flex items-center justify-between border-b border-gray-100 pb-4">`n          <div>`n            <h3 className="text-lg font-semibold text-gray-900">`n              {filteredMarkets.length} market{filteredMarkets.length !== 1 ? 's' : ''}`n            </h3>`n            <p className="text-sm text-gray-500 mt-1">`n              Trade on the outcome of future events`n            </p>`n          </div>`n          <Button `n            onClick={refetch} `n            variant="ghost" `n            size="sm"`n            className="text-gray-600 hover:text-gray-900"`n          >`n            <RefreshCw className="h-4 w-4 mr-2" />`n            Refresh`n          </Button>`n        </div>`n      )}`n      `n      {/* Polymarket-style grid with proper spacing */}`n      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">`n        {filteredMarkets.map((market) => (`n          <MarketCard key={market.id} market={market} />`n        ))}`n      </div>`n    </div>`n  );`n};