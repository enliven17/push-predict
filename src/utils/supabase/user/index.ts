import { supabase } from "@/utils/supabase/client";`nimport { Tables } from "@/utils/supabase/database";`n`nexport type User = Tables<"users">;`n`nexport async function getUserByAddress(address: string): Promise<User | null> {`n  try {`n    const { data, error } = await supabase`n      .from("users")`n      .select("*")`n      .eq("address", address)`n      .single();`n`n    if (error) {`n      console.error("Error fetching user by address:", error);`n      return null;`n    }`n`n    return data;`n  } catch (error) {`n    console.error("Error fetching user by address:", error);`n    return null;`n  }`n}`n`nexport async function getUserDisplayName(address: string): Promise<string> {`n  const user = await getUserByAddress(address);`n  return (`n    user?.display_name ||`n    user?.username ||`n    `${address.slice(0, 6)}...${address.slice(-4)}``n  );`n}`n`nexport function generateFallbackName(address: string): string {`n  return `${address.slice(0, 6)}...${address.slice(-4)}`;`n}`n`nexport async function getUsersByAddresses(`n  addresses: string[],`n): Promise<Map<string, User>> {`n  try {`n    if (addresses.length === 0) return new Map();`n`n    const { data, error } = await supabase`n      .from("users")`n      .select("*")`n      .in("address", addresses);`n`n    if (error) {`n      console.error("Error fetching users by addresses:", error);`n      return new Map();`n    }`n`n    // Create a map for easy lookup`n    const userMap = new Map<string, User>();`n    data?.forEach((user) => {`n      userMap.set(user.address, user);`n    });`n`n    return userMap;`n  } catch (error) {`n    console.error("Error fetching users by addresses:", error);`n    return new Map();`n  }`n}`n`nexport function formatUserDisplayName(`n  user: User | undefined,`n  address: string,`n): string {`n  if (!user) {`n    return `${address.slice(0, 6)}...${address.slice(-4)}`;`n  }`n  return (`n    user.display_name ||`n    user.username ||`n    `${address.slice(0, 6)}...${address.slice(-4)}``n  );`n}`n`nexport function formatUserShortName(`n  user: User | undefined,`n  address: string,`n): string {`n  if (!user) {`n    return `${address.slice(0, 6)}...${address.slice(-4)}`;`n  }`n  return user.username || `${address.slice(0, 6)}...${address.slice(-4)}`;`n}`n`n/**`n * Checks if users exist in Supabase and returns their profile data`n * @param addresses Array of wallet addresses to check`n * @returns Promise<Map<string, User | null>> - Map where key is address and value is user data or null if not found`n */`nexport async function checkUsersInSupabase(`n  addresses: string[],`n): Promise<Map<string, User | null>> {`n  try {`n    if (addresses.length === 0) {`n      return new Map();`n    }`n`n    console.log(`ğŸ” Checking ${addresses.length} users in Supabase...`);`n`n    const { data, error } = await supabase`n      .from("users")`n      .select("*")`n      .in("address", addresses);`n`n    if (error) {`n      console.error("Error checking users in Supabase:", error);`n      // Return map with all addresses as null on error`n      const errorMap = new Map<string, User | null>();`n      addresses.forEach((address) => errorMap.set(address, null));`n      return errorMap;`n    }`n`n    console.log(`n      `âœ… Found ${data?.length || 0} users in Supabase out of ${addresses.length} checked`,`n    );`n`n    // Create a map with all addresses`n    const userMap = new Map<string, User | null>();`n`n    // Initialize all addresses as null (not found)`n    addresses.forEach((address) => {`n      userMap.set(address, null);`n    });`n`n    // Update map with found users`n    if (data) {`n      data.forEach((user) => {`n        userMap.set(user.address, user);`n      });`n    }`n`n    return userMap;`n  } catch (error) {`n    console.error("Error checking users in Supabase:", error);`n    // Return map with all addresses as null on error`n    const errorMap = new Map<string, User | null>();`n    addresses.forEach((address) => errorMap.set(address, null));`n    return errorMap;`n  }`n}`n`n/**`n * Gets user display information with fallback handling`n * @param supabaseUser User data from Supabase (or null if not found)`n * @param address Wallet address for fallback`n * @returns Object with display name, short name, avatar URL, and profile status`n */`nexport function getUserDisplayInfo(supabaseUser: User | null, address: string) {`n  const hasProfile = !!supabaseUser;`n`n  const displayName =`n    supabaseUser?.display_name ||`n    supabaseUser?.username ||`n    `${address.slice(0, 6)}...${address.slice(-4)}`;`n`n  const shortName =`n    supabaseUser?.username || `${address.slice(0, 6)}...${address.slice(-4)}`;`n`n  const avatarUrl =`n    supabaseUser?.profile_image_url ||`n    `https://api.dicebear.com/7.x/avataaars/svg?seed=${address}`;`n`n  return {`n    displayName,`n    shortName,`n    avatarUrl,`n    hasProfile,`n    bio: supabaseUser?.bio || null,`n    username: supabaseUser?.username || null,`n    joinedAt: supabaseUser?.joined_at || null,`n  };`n}