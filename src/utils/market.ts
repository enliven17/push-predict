/* eslint-disable @typescript-eslint/no-explicit-any */`nimport { Market, MarketCategory, MarketStatus } from '@/types/market';`n`nexport interface MarketStats {`n  active: number;`n  totalVolume: number;`n  avgVolume: number;`n  endingSoon: number;`n}`n`nexport interface FilterOptions {`n  searchQuery: string;`n  activeTab: string;`n  selectedCategory: MarketCategory | 'all';`n  selectedStatus: MarketStatus | 'all';`n}`n`nexport interface SortOptions {`n  sortBy: 'newest' | 'ending' | 'volume' | 'popular';`n}`n`n// Transform contract markets to app market format`nexport const transformContractMarkets = (contractMarkets: any[]): Market[] => {`n  return contractMarkets.map((market) => ({`n    id: market.id,`n    creator: market.creator,`n    title: market.title,`n    description: market.description,`n    optionA: market.optionA,`n    optionB: market.optionB,`n    category: market.category,`n    endTime: market.endTime,`n    createdAt: market.createdAt,`n    outcome: market.outcome,`n    totalOptionAShares: market.totalOptionAShares,`n    totalOptionBShares: market.totalOptionBShares,`n    resolved: market.resolved,`n    status: market.status,`n    totalPool: market.totalPool,`n    minBet: market.minBet,`n    maxBet: market.maxBet`n  }));`n};`n`n// Filter markets by search query`nexport const filterMarketsBySearch = (markets: Market[], searchQuery: string): Market[] => {`n  if (!searchQuery) return markets;`n  `n  const query = searchQuery.toLowerCase();`n  return markets.filter(market =>`n    market.title.toLowerCase().includes(query) ||`n    market.description.toLowerCase().includes(query) ||`n    market.optionA.toLowerCase().includes(query) ||`n    market.optionB.toLowerCase().includes(query)`n  );`n};`n`n// Filter markets by tab`nexport const filterMarketsByTab = (markets: Market[], activeTab: string): Market[] => {`n  switch (activeTab) {`n    case 'active':`n      return markets.filter(market => market.status === MarketStatus.Active);`n    `n    case 'ending':`n      const sevenDaysFromNow = Date.now() + (7 * 24 * 60 * 60 * 1000);`n      return markets.filter(market => `n        market.status === MarketStatus.Active && `n        parseFloat(market.endTime) * 1000 < sevenDaysFromNow`n      );`n    `n    case 'resolved':`n      return markets.filter(market => market.resolved);`n    `n    case 'trending':`n      return markets.filter(market => parseFloat(market.totalPool) > 100);`n    `n    default:`n      return markets;`n  }`n};`n`n// Filter markets by category`nexport const filterMarketsByCategory = (`n  markets: Market[], `n  selectedCategory: MarketCategory | 'all'`n): Market[] => {`n  if (selectedCategory === 'all') return markets;`n  return markets.filter(market => market.category === selectedCategory);`n};`n`n// Filter markets by status`nexport const filterMarketsByStatus = (`n  markets: Market[], `n  selectedStatus: MarketStatus | 'all'`n): Market[] => {`n  if (selectedStatus === 'all') return markets;`n  return markets.filter(market => market.status === selectedStatus);`n};`n`n// Sort markets`nexport const sortMarkets = (markets: Market[], sortBy: SortOptions['sortBy']): Market[] => {`n  return [...markets].sort((a, b) => {`n    switch (sortBy) {`n      case 'newest':`n        return parseFloat(b.createdAt) - parseFloat(a.createdAt);`n      `n      case 'ending':`n        return parseFloat(a.endTime) - parseFloat(b.endTime);`n      `n      case 'volume':`n        return parseFloat(b.totalPool) - parseFloat(a.totalPool);`n      `n      case 'popular':`n        const aTotal = parseFloat(a.totalOptionAShares) + parseFloat(a.totalOptionBShares);`n        const bTotal = parseFloat(b.totalOptionAShares) + parseFloat(b.totalOptionBShares);`n        return bTotal - aTotal;`n      `n      default:`n        return 0;`n    }`n  });`n};`n`n// Apply all filters and sorting`nexport const filterAndSortMarkets = (`n  markets: Market[],`n  filters: FilterOptions,`n  sortOptions: SortOptions`n): Market[] => {`n  let filtered = markets;`n  `n  // Apply search filter`n  filtered = filterMarketsBySearch(filtered, filters.searchQuery);`n  `n  // Apply tab filter`n  filtered = filterMarketsByTab(filtered, filters.activeTab);`n  `n  // Apply category filter`n  filtered = filterMarketsByCategory(filtered, filters.selectedCategory);`n  `n  // Apply status filter`n  filtered = filterMarketsByStatus(filtered, filters.selectedStatus);`n  `n  // Apply sorting`n  return sortMarkets(filtered, sortOptions.sortBy);`n};`n`n// Calculate market statistics`nexport const calculateMarketStats = (markets: Market[]): MarketStats => {`n  const active = markets.filter(m => m.status === MarketStatus.Active).length;`n  const totalVolume = markets.reduce((sum, m) => sum + parseFloat(m.totalPool), 0);`n  const avgVolume = markets.length > 0 ? totalVolume / markets.length : 0;`n  const oneDayFromNow = Date.now() + (24 * 60 * 60 * 1000);`n  const endingSoon = markets.filter(m => `n    m.status === MarketStatus.Active && `n    parseFloat(m.endTime) * 1000 < oneDayFromNow`n  ).length;`n`n  return { active, totalVolume, avgVolume, endingSoon };`n};`n`n// Get market counts by tab`nexport const getMarketCountsByTab = (markets: Market[]) => {`n  const sevenDaysFromNow = Date.now() + (7 * 24 * 60 * 60 * 1000);`n  `n  return {`n    all: markets.length,`n    active: markets.filter(m => m.status === MarketStatus.Active).length,`n    ending: markets.filter(m => `n      m.status === MarketStatus.Active && `n      parseFloat(m.endTime) * 1000 < sevenDaysFromNow`n    ).length,`n    resolved: markets.filter(m => m.resolved).length,`n    trending: markets.filter(m => parseFloat(m.totalPool) > 100).length`n  };`n};`n`n// Reset all filters`nexport const resetAllFilters = () => ({`n  searchQuery: '',`n  selectedCategory: 'all' as const,`n  selectedStatus: 'all' as const,`n  activeTab: 'all'`n});